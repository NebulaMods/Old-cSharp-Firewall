// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NebulaMods.Services;

namespace NebulaMods.Migrations
{
    [DbContext(typeof(DatabaseService))]
    [Migration("20210928165732_initial-creation")]
    partial class initialcreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("NebulaMods.Database.IPSchema", b =>
                {
                    b.Property<string>("IP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgeRules")
                        .HasColumnType("TEXT");

                    b.Property<string>("FlagLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("Geolocation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Server")
                        .HasColumnType("TEXT");

                    b.HasKey("IP");

                    b.ToTable("IPs");
                });

            modelBuilder.Entity("NebulaMods.Database.LogsSchema+AttackLogs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DetectionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("IP")
                        .HasColumnType("TEXT");

                    b.Property<long>("InitialBPS")
                        .HasColumnType("INTEGER");

                    b.Property<long>("InitialPPS")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PcapFile")
                        .HasColumnType("TEXT");

                    b.Property<long>("PeakBPS")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PeakPPS")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Server")
                        .HasColumnType("TEXT");

                    b.Property<long>("TotalBytes")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalPackets")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalUniqueIPs")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("AttackLogs");
                });

            modelBuilder.Entity("NebulaMods.Database.LogsSchema+ErrorLogs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Application")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ErrorTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("NebulaMods.Database.SettingsSchema", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Settings");
                });
#pragma warning restore 612, 618
        }
    }
}
